package localhost3000.airshowapplication;

import android.graphics.Color;
import android.support.design.widget.TabLayout;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.TextView;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.MapView;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;

import java.util.ArrayList;

public class NewMap extends AppCompatActivity implements OnMapReadyCallback {

    ArrayList<String> arrParkingLot = new ArrayList<>();

    //ArrayList<String[]> arlParking = new ArrayList<>();

    ArrayList<ParkingSpot> spots;

    AirshowInformationStorage Storage = new AirshowInformationStorage();

    TextView txtNoParking;

    GoogleMap mMap;

    ListView lvParking;

    double dblLat = 0;
    double dblLng = 0;

    String strSpotName;

    boolean bolLatLngChange = false;

    TabLayout tabLayout;
    ArrayAdapter<String> Adapter;

    SupportMapFragment mapFrag;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_new_map);

        tabLayout = findViewById(R.id.ParkingLayout);

        //Gets parking lots
        //arlParking = Storage.getParking();

        spots = Storage.getParkingSpots();

        tabLayout.addOnTabSelectedListener(TabChange);

        txtNoParking = findViewById(R.id.txtNoParking);

        lvParking = findViewById(R.id.ParkingList);

        try {
            ChangeParkingDisplay("Drive");
        }
        catch (Exception E)
        {
            txtNoParking.setVisibility(View.VISIBLE);
            lvParking.setVisibility(View.INVISIBLE);
            E.printStackTrace();
        }

        changeTabsFont();

        if (!CheckParking())
            tabLayout.removeTabAt(1);


        //Generated by map fragment
        mapFrag = ((SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.ParkingMap));

    }

    TabLayout.OnTabSelectedListener TabChange = new TabLayout.OnTabSelectedListener() {
        @Override
        public void onTabSelected(TabLayout.Tab tab)  {
            int intTabSelected = tab.getPosition();
            String strType = (intTabSelected ==0 ) ? "Drive":"Bike";

            try {
                ChangeParkingDisplay(strType);
            }
            catch (Exception E)
            {
                E.printStackTrace();
                txtNoParking.setVisibility(View.VISIBLE);
                lvParking.setVisibility(View.INVISIBLE);
            }

        }

        @Override
        public void onTabUnselected(TabLayout.Tab tab) {

        }

        @Override
        public void onTabReselected(TabLayout.Tab tab) {

        }
    };

    private boolean CheckParking() {
        ArrayList<String> bikePark = new ArrayList<>();
        for (ParkingSpot spot : Storage.getParkingSpots()) {
            if (spot.getName() != null)
                bikePark.add(spot.getName());
        }
        return bikePark.isEmpty();
    }

    OnMapReadyCallback mapReadyCallback = this;

    //Declaring on click for list view
    AdapterView.OnItemClickListener ParkingChosen = new AdapterView.OnItemClickListener() {
        @Override
        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
            //Get the selected parking lot's coordinates

            String strSpotName = parent.getItemAtPosition(position).toString();

            for (ParkingSpot Spot : spots)
            {
                if (Spot != null) {
                    if (strSpotName.contains("(FULL) "))
                    {
                        strSpotName = strSpotName.replace("(FULL) ", "");
                    }
                    if (strSpotName.equals(Spot.getName())) {
                        dblLat = Spot.getXCoord();
                        dblLng = Spot.getYCoord();
                        strSpotName = parent.getItemAtPosition(position).toString();
                        bolLatLngChange = true;
                    }
                }
            }

            mapFrag.getMapAsync(mapReadyCallback);
        }
    };

    @Override
    public void onMapReady(GoogleMap googleMap)
    {

        if (bolLatLngChange)
        {
            mMap = googleMap;
            //Displays and focuses on pin in map
            LatLng Pin = new LatLng(dblLat, dblLng);
            mMap.addMarker(new MarkerOptions().position(Pin).title(strSpotName));
            mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(Pin, 13));
        }
    }

    private void changeTabsFont() {

        ViewGroup vg = (ViewGroup) tabLayout.getChildAt(0);
        int tabsCount = vg.getChildCount();
        for (int j = 0; j < tabsCount; j++) {
            ViewGroup vgTab = (ViewGroup) vg.getChildAt(j);
            int tabChildCount = vgTab.getChildCount();
            for (int i = 0; i < tabChildCount; i++) {
                View tabViewChild = vgTab.getChildAt(i);
                if (tabViewChild instanceof TextView) {
                    ((TextView) tabViewChild).setTextColor(Color.WHITE);
                }
            }
        }
    }

    private void ChangeParkingDisplay(String strType)
    {
        ArrayList<String> spotNames = new ArrayList<>();
        for (ParkingSpot spot: spots)
        {
            if (spot != null)
            {
                if (spot.getType().equals(strType) && !spot.getName().contains("AFB"))
                {
                    spotNames.add((spot.getFull()) ? "(FULL) "+spot.getName() : spot.getName());
                }
            }
        }

        if (spotNames.size() != 0)
        {
            ArrayAdapter<String> adapt = new ArrayAdapter<>(this, R.layout.spinner, spotNames);
            lvParking.setAdapter(adapt);
            lvParking.setVisibility(View.VISIBLE);
            lvParking.setOnItemClickListener(ParkingChosen);
            txtNoParking.setVisibility(View.INVISIBLE);
        }
        else
        {
            lvParking.setVisibility(View.INVISIBLE);
            txtNoParking.setVisibility(View.VISIBLE);
        }


    }
}
